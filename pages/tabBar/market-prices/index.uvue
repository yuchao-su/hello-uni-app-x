<template>
  <view class="tabs-container">
    <!-- 一级 tab -->
    <scroll-view scroll-x class="first-tabs">
      <view class="flex-row">
        <text
          v-for="(tab, i) in tabs"
          :key="i"
          :class="['tab-item', { 'active-tab': i === activePrimary }]"
          @click="jumpToPrimary(i)"
        >
          {{ tab.name }}
        </text>
      </view>
    </scroll-view>

    <!-- 二级 tab -->
    <scroll-view
      scroll-x
      class="second-tabs"
      v-if="tabs[activePrimary].children?.length"
    >
      <view class="flex-row">
        <text
          v-for="(child, j) in tabs[activePrimary].children"
          :key="j"
          :class="['tab-item', { 'active-tab': j === activeSub }]"
          @click="jumpToSub(activePrimary, j)"
        >
          {{ child.name }}
        </text>
      </view>
    </scroll-view>

    <!-- Swiper 区域 -->
    <swiper
      class="swiper-view"
      :current="pageIndex"
      @animationfinish="onPageChange"
    >
      <swiper-item v-for="(p, i) in pages" :key="i">
        <long-page :type="p.type" :preload="p.preload" />
      </swiper-item>
    </swiper>
  </view>
</template>

<script>
import longPage from './market-prices-page.uvue';

export default {
  components: { longPage },
  
  data() {
    type Tab = {
      name: string;
      type: string;
      children?: { name: string; type: string }[];
    };
    const tabs: Tab[] = [
      {
        name: '最新上架',
        type: 'UpdatedDate',
        children: [
          { name: '近7天', type: 'UpdatedDate' },
          { name: '近30天', type: 'UpdatedDate' }
        ]
      },
      {
        name: '免费热榜',
        type: 'FreeHot',
        children: [
          { name: '日榜', type: 'FreeHot' },
          { name: '周榜', type: 'FreeHot' },
          { name: '月榜', type: 'FreeHot' }
        ]
      },
      { name: '付费热榜', type: 'PaymentHot', children: [] },
      { name: '热门总榜', type: 'HotList', children: [] }
    ];

    type PageItem = {
      primaryIndex: number;
      subIndex: number | null;
      displayName: string;
      type: string;
      preload: boolean;
    };

    
    const pages: PageItem[] = [];
    tabs.forEach((tab, i) => {
      if (tab.children && tab.children.length) {
        tab.children.forEach((sub, j) => {
          pages.push({
            primaryIndex: i,
            subIndex: j,
            displayName: sub.name,
            type: sub.type,
            preload: true,
          });
        });
      } else {
        pages.push({
          primaryIndex: i,
          subIndex: null,
          displayName: tab.name,
          type: tab.type,
          preload: true,
        });
      }
    });

    return {
      tabs,
      pages,
      pageIndex: 0
    };
  },
  computed: {
    activePrimary() {
      return this.pages[this.pageIndex]?.primaryIndex ?? 0;
    },
    activeSub() {
      return this.pages[this.pageIndex]?.subIndex ?? 0;
    }
  },
  methods: {
    onPageChange(e) {
      this.pageIndex = e.detail.current;
    },
    jumpToPrimary(i) {
      const idx = this.pages.findIndex(p => p.primaryIndex === i);
      if (idx !== -1) this.pageIndex = idx;
    },
    jumpToSub(i, j) {
      const idx = this.pages.findIndex(p => p.primaryIndex === i && p.subIndex === j);
      if (idx !== -1) this.pageIndex = idx;
    }
  }
};
</script>

<style scoped>
.tabs-container {
  flex: 1;
}
.flex-row {
  display: flex;
  flex-direction: row;
}
.tab-item {
  padding: 10px 16px;
  font-size: 14px;
  color: #666;
}
.active-tab {
  color: #007aff;
  font-weight: bold;
}
.first-tabs,
.second-tabs {
  background-color: #fff;
  border-bottom: 1px solid #eee;
}
.swiper-view {
  height: calc(100vh - 88px); /* 你可以根据 tab 区域实际高度调整 */
}
</style>